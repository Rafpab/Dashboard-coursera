# Install and import required libraries
require(shiny)
require(ggplot2)
require(leaflet)
require(tidyverse)
require(httr)
require(scales)
# Import model_prediction R which contains methods to call OpenWeather API
# and make predictions
source("model_prediction.R")


test_weather_data_generation<-function(){
  #Test generate_city_weather_bike_data() function
  city_weather_bike_df<-generate_city_weather_bike_data()
  stopifnot(length(city_weather_bike_df)>0)
  print(head(city_weather_bike_df))
  print(head(city_weather_bike_df$FORECASTDATETIME))
  return(city_weather_bike_df)
}

# Create a RShiny server
shinyServer(function(input, output){
  # Define a city list
  
  # Define color factor
  color_levels <- colorFactor(c("green", "yellow", "red"), 
                              levels = c("small", "medium", "large"))
  city_weather_bike_df <- generate_city_weather_bike_data()
  
  # Create another data frame called `cities_max_bike` with each row contains city location info and max bike
  # prediction for the city
  
  cities_max_bike <- generate_city_weather_bike_data()
  stopifnot(length(cities_max_bike)>0)
  cities_max_bike <- cities_max_bike %>% group_by(CITY_ASCII) %>% filter(BIKE_PREDICTION == max(BIKE_PREDICTION)) %>% distinct(CITY_ASCII,.keep_all = TRUE)
  city_weather_bike_df$FORECASTDATETIME <- as.POSIXct(city_weather_bike_df$FORECASTDATETIME,"%Y-%m-%d %H:%M:%OS")
  class(city_weather_bike_df$FORECASTDATETIME)
  # Observe drop-down event
  
  # Then render output plots with an id defined in ui.R
  
    observeEvent(input$city_dropdown, {
    if(input$city_dropdown == "All") {
      output$city_bike_map <- renderLeaflet({leaflet() %>% addTiles() %>% addCircleMarkers(lng = cities_max_bike$LNG, lat = cities_max_bike$LAT, popup = cities_max_bike$LABEL, radius = ifelse(cities_max_bike$BIKE_PREDICTION_LEVEL == "small",6,ifelse(cities_max_bike$BIKE_PREDICTION_LEVEL == "medium",10,12)),color = ifelse(cities_max_bike$BIKE_PREDICTION_LEVEL == "small","green",ifelse(cities_max_bike$BIKE_PREDICTION_LEVEL == "medium","yellow","red")),fillOpacity=1)})
      output$temp_line <- NULL      
      output$bike_line <- NULL
      }
      
    else {cities_max_bike <- cities_max_bike %>% filter(CITY_ASCII == input$city_dropdown)
      output$city_bike_map <- renderLeaflet({leaflet() %>% addTiles() %>% addMarkers(lng = cities_max_bike$LNG, lat = cities_max_bike$LAT, popup = cities_max_bike$DETAILED_LABEL)})
      city_weather_bike_df <- city_weather_bike_df %>% filter(CITY_ASCII == input$city_dropdown)
      output$temp_line <- renderPlot({ggplot(city_weather_bike_df,aes(x=FORECASTDATETIME,y=TEMPERATURE,label=TEMPERATURE)) + geom_line(color="yellow") + geom_point() + geom_text(city_weather_bike_df,mapping=aes(label=paste(TEMPERATURE,"C")), vjust=1, hjust=0,size=4,check_overlap = TRUE) + xlab("Date")
        })
      output$bike_line <- renderPlot({ggplot(city_weather_bike_df,aes(x=FORECASTDATETIME,y=BIKE_PREDICTION,label=BIKE_PREDICTION)) + geom_line(color="darkred") + geom_point() + geom_text()
        })
      output$bike_date_output <- 
        
        renderText({
          input$plot_click$x
          
          })
      
  
    }  
})
})
